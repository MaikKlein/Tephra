Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 0x7ffd3b6e2250:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = 0x7ffd3b6e2220
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 0x7ffd3b6e2810:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "VulkanTriangle"
            applicationVersion:             uint32_t = 0
            pEngineName:                    const char* = "VulkanTriangle"
            engineVersion:                  uint32_t = 0
            apiVersion:                     uint32_t = 4194340
        enabledLayerCount:              uint32_t = 1
        ppEnabledLayerNames:            const char* const* = 0x564da0a45790
            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_LUNARG_standard_validation"
        enabledExtensionCount:          uint32_t = 4
        ppEnabledExtensionNames:        const char* const* = 0x564da0a44770
            ppEnabledExtensionNames[0]:     const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_KHR_xlib_surface"
            ppEnabledExtensionNames[3]:     const char* const = "VK_EXT_debug_report"
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 0x564da0a66010

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 0x7ffd3b6e29f0:
        sType:                          VkStructureType = UNKNOWN (1000128004)
        pNext:                          const void* = NULL
        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4352 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 1
        pUserData:                      void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMessenger:                     VkDebugUtilsMessengerEXT* = 0x564da0d4db40

Thread 0, Frame 0:
vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pCreateInfo:                    const VkXlibSurfaceCreateInfoKHR* = 0x7ffd3b6e2a70:
        sType:                          VkStructureType = UNKNOWN (1000004000)
        pNext:                          const void* = NULL
        flags:                          VkXlibSurfaceCreateFlagsKHR = 0
        dpy:                            Display* = 0x564da0a1a5a0
        window:                         Window = 41943042
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = 0x1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0x7ffd3b6e2270
        pPhysicalDevices[0]:            VkPhysicalDevice = 0x564da0dca1f0
        pPhysicalDevices[1]:            VkPhysicalDevice = 0x564da0dca130

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0x564da0a66010
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0x7ffd3b6e2270
        pPhysicalDevices[0]:            VkPhysicalDevice = 0x564da0dca1f0
        pPhysicalDevices[1]:            VkPhysicalDevice = 0x564da0dca130

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0x564da0dc6490
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0x564da0dc6490:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x564da0dc649c:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0x564da0dc64a8:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0x564da0dc64b4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 0x1
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pCreateInfo:                    const VkDeviceCreateInfo* = 0x7ffd3b6e1e00:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = 0x7ffd3b6e1de0
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 0x7ffd3b6e26f8
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 0x7ffd3b6e26f8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 0x7ffd3b6e23c4
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 0x7ffd3b6e2568
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 0x7ffd3b6e3190:
            robustBufferAccess:             VkBool32 = 0
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 0
            independentBlend:               VkBool32 = 0
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 0
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 0
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 0x564da0e8fa40

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0x564da0dcb050

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x564da0fd3ab0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x564da0fd3ab0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x564da0fd3ab8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd3b6e2338:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 0
        currentExtent:                  VkExtent2D = 0x7ffd3b6e2340:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        minImageExtent:                 VkExtent2D = 0x7ffd3b6e2348:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        maxImageExtent:                 VkExtent2D = 0x7ffd3b6e2350:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 9 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 23 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd3b6e2660:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x2

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd3b6e2788:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x2
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 2
    pCommandBuffers:                VkCommandBuffer* = 0x564da0d01f90
        pCommandBuffers[0]:             VkCommandBuffer = 0x564da0dcb3e0
        pCommandBuffers[1]:             VkCommandBuffer = 0x564da0ff5920

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e2a70:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e2a74
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e2a74:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e2a7c:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e2a84:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e2a8c:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e2a94:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e2a9c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e2aa4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e2aac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e2ab4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e2abc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e2ac4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e2acc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e2ad4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e2adc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e2ae4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e2aec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e2af4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e2afc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e2b04:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e2b0c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e2b14:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e2b1c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e2b24:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e2b2c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e2b34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e2b3c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e2b44:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e2b4c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e2b54:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e2b5c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e2b64:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e2b6c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e2b78
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e2b78:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e2b88:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e2b98:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e2ba8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e2bb8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e2bc8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e2bd8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e2be8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e2bf8:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e2c08:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e2c18:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e2c28:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e2c38:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e2c48:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e2c58:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e2c68:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageCreateInfo* = 0x7ffd3b6e2930:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D16_UNORM (124)
        extent:                         VkExtent3D = 0x7ffd3b6e294c:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 0x3

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x3
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e2a70:
        size:                           VkDeviceSize = 2162696
        alignment:                      VkDeviceSize = 32768
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e27a8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 2162696
        memoryTypeIndex:                uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x4

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x3
    memory:                         VkDeviceMemory = 0x4
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da0dcb3e0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da0dcb3e0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e2308:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da0dcb3e0
    srcStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 512 (VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e22a0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e22a0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 1536 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x3
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e22d0:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da0dcb3e0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e22f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x5

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e22a0
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e22a0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909c84
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e2298
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da0dcb3e0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x5

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e22a0
        pFences[0]:                     const VkFence = 0x5
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyFence(device, fence, pAllocator) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    fence:                          VkFence = 0x5
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e2a20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x3
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D16_UNORM (124)
        components:                     VkComponentMapping = 0x7ffd3b6e2a48:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e2a58:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x6

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd3b6e2678:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x7

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0x7ffd3b6e2678:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0x8

Thread 0, Frame 0:
vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkPipelineCacheCreateInfo* = 0x7ffd3b6e4190:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO (17)
        pNext:                          const void* = NULL
        flags:                          VkPipelineCacheCreateFlags = 0
        initialDataSize:                size_t = 0
        pInitialData:                   const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineCache:                 VkPipelineCache* = 0x9

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0x564da0a44830
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0x564da0a44830:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0x564da0a44838:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0x7ffd3b6e43a8:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 0
        currentExtent:                  VkExtent2D = 0x7ffd3b6e43b0:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        minImageExtent:                 VkExtent2D = 0x7ffd3b6e43b8:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        maxImageExtent:                 VkExtent2D = 0x7ffd3b6e43c0:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 9 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 23 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pPresentModeCount:              uint32_t* = 3
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    surface:                        VkSurfaceKHR = 0x1
    pPresentModeCount:              uint32_t* = 3
    pPresentModes:                  VkPresentModeKHR* = 0x564da0dcaea0
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0x7ffd3b6e4448:
        sType:                          VkStructureType = UNKNOWN (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = 0x1
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 0x7ffd3b6e4474:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = 0xa

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    swapchain:                      VkSwapchainKHR = 0xa
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    swapchain:                      VkSwapchainKHR = 0xa
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 0x564da1000fa0
        pSwapchainImages[0]:            VkImage = 0xb
        pSwapchainImages[1]:            VkImage = 0xc
        pSwapchainImages[2]:            VkImage = 0xd

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e4368:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0xb
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd3b6e4390:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_R (3)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_G (4)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_B (5)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_A (6)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e43a0:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0xe

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e4368:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0xc
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd3b6e4390:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_R (3)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_G (4)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_B (5)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_A (6)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e43a0:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0xf

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e4368:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0xd
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd3b6e4390:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_R (3)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_G (4)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_B (5)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_A (6)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e43a0:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x10

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0x7ffd3b6e4210:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 0x11

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0x7ffd3b6e4130:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 0x11
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 10
    pCommandBuffers:                VkCommandBuffer* = 0x564da1001ee0
        pCommandBuffers[0]:             VkCommandBuffer = 0x564da1002060
        pCommandBuffers[1]:             VkCommandBuffer = 0x564da1003c30
        pCommandBuffers[2]:             VkCommandBuffer = 0x564da1005800
        pCommandBuffers[3]:             VkCommandBuffer = 0x564da10073d0
        pCommandBuffers[4]:             VkCommandBuffer = 0x564da1008fa0
        pCommandBuffers[5]:             VkCommandBuffer = 0x564da100ab70
        pCommandBuffers[6]:             VkCommandBuffer = 0x564da100c740
        pCommandBuffers[7]:             VkCommandBuffer = 0x564da100e310
        pCommandBuffers[8]:             VkCommandBuffer = 0x564da100fee0
        pCommandBuffers[9]:             VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4398:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42e8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42e8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = UNKNOWN (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0xb
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e4318:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4380:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x12

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e4338
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e4338:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e90a4c0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e90a4c0
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4400
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e90a4c0
    fence:                          VkFence = 0x12

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e4338
        pFences[0]:                     const VkFence = 0x12
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4398:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42e8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42e8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = UNKNOWN (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0xc
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e4318:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4380:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x13

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e4338
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e4338:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e90a4c0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e90a4c0
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4400
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e90a4c0
    fence:                          VkFence = 0x13

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e4338
        pFences[0]:                     const VkFence = 0x13
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4398:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42e8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42e8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = UNKNOWN (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0xd
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e4318:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4380:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x14

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e4338
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e4338:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e90a4c0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e90a4c0
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4400
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e90a4c0
    fence:                          VkFence = 0x14

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e4338
        pFences[0]:                     const VkFence = 0x14
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e4218:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e421c
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e421c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e4224:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e422c:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e4234:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e423c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e4244:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e424c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e4254:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e425c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e4264:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e426c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e4274:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e427c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e4284:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e428c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e4294:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e429c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e42a4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e42ac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e42b4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e42bc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e42c4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e42cc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e42d4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e42dc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e42e4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e42ec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e42f4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e42fc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e4304:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e430c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e4314:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e4320
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e4320:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e4330:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e4340:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e4350:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e4360:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e4370:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e4380:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e4390:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e43a0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e43b0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e43c0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e43d0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e43e0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e43f0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e4400:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e4410:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd3b6e4218:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 12
        usage:                          VkBufferUsageFlags = 67 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x15

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x15
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e41d0:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e41d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 16
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x16

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x15
    memory:                         VkDeviceMemory = 0x16
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x16
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 12
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7f8005806000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x16

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e4218:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e421c
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e421c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e4224:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e422c:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e4234:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e423c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e4244:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e424c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e4254:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e425c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e4264:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e426c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e4274:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e427c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e4284:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e428c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e4294:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e429c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e42a4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e42ac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e42b4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e42bc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e42c4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e42cc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e42d4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e42dc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e42e4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e42ec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e42f4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e42fc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e4304:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e430c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e4314:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e4320
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e4320:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e4330:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e4340:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e4350:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e4360:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e4370:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e4380:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e4390:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e43a0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e43b0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e43c0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e43d0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e43e0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e43f0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e4400:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e4410:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd3b6e4218:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 96
        usage:                          VkBufferUsageFlags = 131 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x17

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x17
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e41d0:
        size:                           VkDeviceSize = 96
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e41d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 96
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x18

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x17
    memory:                         VkDeviceMemory = 0x18
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x18
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 96
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7f8005806000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x18

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e4138:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e413c
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e413c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e4144:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e414c:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e4154:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e415c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e4164:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e416c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e4174:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e417c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e4184:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e418c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e4194:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e419c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e41a4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e41ac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e41b4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e41bc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e41c4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e41cc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e41d4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e41dc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e41e4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e41ec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e41f4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e41fc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e4204:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e420c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e4214:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e421c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e4224:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e422c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e4234:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e4240
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e4240:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e4250:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e4260:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e4270:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e4280:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e4290:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e42a0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e42b0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e42c0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e42d0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e42e0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e42f0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e4300:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e4310:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e4320:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e4330:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkBufferCreateInfo* = 0x7ffd3b6e4138:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 35 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0x19

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x19
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e40f0:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e40f0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 16
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x1a

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    buffer:                         VkBuffer = 0x19
    memory:                         VkDeviceMemory = 0x1a
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x1a
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 16
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0x7f8005806000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    memory:                         VkDeviceMemory = 0x1a

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd3b6e44a8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 808
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x1b

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x564da101f6b0
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x564da101f6b0:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 2147483647 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL | VK_SHADER_STAGE_RAYGEN_BIT_NV | VK_SHADER_STAGE_ANY_HIT_BIT_NV | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV | VK_SHADER_STAGE_MISS_BIT_NV | VK_SHADER_STAGE_INTERSECTION_BIT_NV | VK_SHADER_STAGE_CALLABLE_BIT_NV | VK_SHADER_STAGE_TASK_BIT_NV | VK_SHADER_STAGE_MESH_BIT_NV)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x1c

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0x7ffd3b6e4380:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x564da101f590
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x1c
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 0x1d

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pipelineCache:                  VkPipelineCache = 0x9
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkComputePipelineCreateInfo* = 0x7ffd3b6e43e0
        pCreateInfos[0]:                const VkComputePipelineCreateInfo = 0x7ffd3b6e43e0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stage:                          VkPipelineShaderStageCreateInfo = 0x7ffd3b6e43f8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:                          const void* = NULL
                flags:                          VkPipelineShaderStageCreateFlags = 0
                stage:                          VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_ALL)
                module:                         VkShaderModule = 0x1b
                pName:                          const char* = "main"
                pSpecializationInfo:            const VkSpecializationInfo* = NULL
            layout:                         VkPipelineLayout = 0x1d
            basePipelineHandle:             VkPipeline = 0
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0x564da101e460
        pPipelines[0]:                  VkPipeline = 0x1e

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd3b6e43a8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 852
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x1f

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0x7ffd3b6e43a8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 688
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 0x20

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkRenderPassCreateInfo* = 0x7ffd3b6e4378:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkAttachmentDescription* = 0x564da10209e0
            pAttachments[0]:                const VkAttachmentDescription = 0x564da10209e0:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            pAttachments[1]:                const VkAttachmentDescription = 0x564da1020a04:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_D16_UNORM (124)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 0x7ffd3b6e43b8
            pSubpasses[0]:                  const VkSubpassDescription = 0x7ffd3b6e43b8:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 0x564da102ab50
                    pColorAttachments[0]:           const VkAttachmentReference = 0x564da102ab50:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = NULL
                pDepthStencilAttachment:        const VkAttachmentReference* = 0x7ffd3b6e430c:
                    attachment:                     uint32_t = 1
                    layout:                         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 1
        pDependencies:                  const VkSubpassDependency* = 0x7ffd3b6e4400
            pDependencies[0]:               const VkSubpassDependency = 0x7ffd3b6e4400:
                srcSubpass:                     uint32_t = 4294967295
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
                dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask:                  VkAccessFlags = 0
                dstAccessMask:                  VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
                dependencyFlags:                VkDependencyFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 0x21

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd3b6e3eb0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x564da102ab90
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x564da102ab90:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 2147483647 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL | VK_SHADER_STAGE_RAYGEN_BIT_NV | VK_SHADER_STAGE_ANY_HIT_BIT_NV | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV | VK_SHADER_STAGE_MISS_BIT_NV | VK_SHADER_STAGE_INTERSECTION_BIT_NV | VK_SHADER_STAGE_CALLABLE_BIT_NV | VK_SHADER_STAGE_TASK_BIT_NV | VK_SHADER_STAGE_MESH_BIT_NV)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x22

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0x7ffd3b6e3f30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x564da10239c0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x22
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 0x23

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pipelineCache:                  VkPipelineCache = 0x9
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0x7ffd3b6e3f60
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0x7ffd3b6e3f60:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 0x7ffd3b6e41b8
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0x7ffd3b6e41b8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                    module:                         VkShaderModule = 0x1f
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0x7ffd3b6e41e8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                    module:                         VkShaderModule = 0x20
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0x7ffd3b6e4158:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 1
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0x7ffd3b6e3ff0
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 0x7ffd3b6e3ff0:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 32
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 2
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0x564da1021610
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 0x564da1021610:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 0x564da1021620:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
                        offset:                         uint32_t = 16
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0x7ffd3b6e4218:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0x7ffd3b6e4188:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0x7ffd3b6e42e8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 0
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0x7ffd3b6e4238:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0x7ffd3b6e4010:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 0x7ffd3b6e4038:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 0x7ffd3b6e4054:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 1
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0x7ffd3b6e4268:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0x7ffd3b6e42c0
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0x7ffd3b6e42c0:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 0x7ffd3b6e4290
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0x7ffd3b6e4138:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 0x7ffd3b6e4108
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 0x23
            renderPass:                     VkRenderPass = 0x21
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0x564da10225e0
        pPipelines[0]:                  VkPipeline = 0x24

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e4178:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e417c
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e417c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e4184:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e418c:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e4194:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e419c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e41a4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e41ac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e41b4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e41bc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e41c4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e41cc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e41d4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e41dc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e41e4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e41ec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e41f4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e41fc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e4204:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e420c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e4214:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e421c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e4224:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e422c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e4234:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e423c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e4244:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e424c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e4254:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e425c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e4264:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e426c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e4274:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e4280
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e4280:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e4290:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e42a0:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e42b0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e42c0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e42d0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e42e0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e42f0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e4300:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e4310:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e4320:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e4330:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e4340:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e4350:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e4360:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e4370:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageCreateInfo* = 0x7ffd3b6e4178:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        extent:                         VkExtent3D = 0x7ffd3b6e4194:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 19 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 0x25

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x25
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e4080:
        size:                           VkDeviceSize = 4210704
        alignment:                      VkDeviceSize = 131072
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e4130:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 4210704
        memoryTypeIndex:                uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x26

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x25
    memory:                         VkDeviceMemory = 0x26
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4008:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e3f58
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e3f58:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x25
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e3f88:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e3ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x27

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e3fa8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e3fa8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4080
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x27

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e3fa8
        pFences[0]:                     const VkFence = 0x27
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e4080:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x25
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0x7ffd3b6e40a8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e40b8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x28

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0x564da0dca1f0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0x7ffd3b6e4178:
        memoryTypeCount:                uint32_t = 4
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffd3b6e417c
            memoryTypes[0]:                 VkMemoryType = 0x7ffd3b6e417c:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[1]:                 VkMemoryType = 0x7ffd3b6e4184:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[2]:                 VkMemoryType = 0x7ffd3b6e418c:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 0x7ffd3b6e4194:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 2
            memoryTypes[4]:                 VkMemoryType = 0x7ffd3b6e419c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[5]:                 VkMemoryType = 0x7ffd3b6e41a4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[6]:                 VkMemoryType = 0x7ffd3b6e41ac:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[7]:                 VkMemoryType = 0x7ffd3b6e41b4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 0x7ffd3b6e41bc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 0x7ffd3b6e41c4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[10]:                VkMemoryType = 0x7ffd3b6e41cc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[11]:                VkMemoryType = 0x7ffd3b6e41d4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[12]:                VkMemoryType = 0x7ffd3b6e41dc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[13]:                VkMemoryType = 0x7ffd3b6e41e4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[14]:                VkMemoryType = 0x7ffd3b6e41ec:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[15]:                VkMemoryType = 0x7ffd3b6e41f4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[16]:                VkMemoryType = 0x7ffd3b6e41fc:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[17]:                VkMemoryType = 0x7ffd3b6e4204:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[18]:                VkMemoryType = 0x7ffd3b6e420c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[19]:                VkMemoryType = 0x7ffd3b6e4214:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[20]:                VkMemoryType = 0x7ffd3b6e421c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[21]:                VkMemoryType = 0x7ffd3b6e4224:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[22]:                VkMemoryType = 0x7ffd3b6e422c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[23]:                VkMemoryType = 0x7ffd3b6e4234:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[24]:                VkMemoryType = 0x7ffd3b6e423c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[25]:                VkMemoryType = 0x7ffd3b6e4244:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[26]:                VkMemoryType = 0x7ffd3b6e424c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[27]:                VkMemoryType = 0x7ffd3b6e4254:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[28]:                VkMemoryType = 0x7ffd3b6e425c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[29]:                VkMemoryType = 0x7ffd3b6e4264:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[30]:                VkMemoryType = 0x7ffd3b6e426c:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
            memoryTypes[31]:                VkMemoryType = 0x7ffd3b6e4274:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffd3b6e4280
            memoryHeaps[0]:                 VkMemoryHeap = 0x7ffd3b6e4280:
                size:                           VkDeviceSize = 8302624768
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0x7ffd3b6e4290:
                size:                           VkDeviceSize = 254668800
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[2]:                 VkMemoryHeap = 0x7ffd3b6e42a0:
                size:                           VkDeviceSize = 8583049216
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[3]:                 VkMemoryHeap = 0x7ffd3b6e42b0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[4]:                 VkMemoryHeap = 0x7ffd3b6e42c0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[5]:                 VkMemoryHeap = 0x7ffd3b6e42d0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[6]:                 VkMemoryHeap = 0x7ffd3b6e42e0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[7]:                 VkMemoryHeap = 0x7ffd3b6e42f0:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[8]:                 VkMemoryHeap = 0x7ffd3b6e4300:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[9]:                 VkMemoryHeap = 0x7ffd3b6e4310:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[10]:                VkMemoryHeap = 0x7ffd3b6e4320:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[11]:                VkMemoryHeap = 0x7ffd3b6e4330:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[12]:                VkMemoryHeap = 0x7ffd3b6e4340:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[13]:                VkMemoryHeap = 0x7ffd3b6e4350:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[14]:                VkMemoryHeap = 0x7ffd3b6e4360:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[15]:                VkMemoryHeap = 0x7ffd3b6e4370:
                size:                           VkDeviceSize = 0
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageCreateInfo* = 0x7ffd3b6e4178:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D16_UNORM (124)
        extent:                         VkExtent3D = 0x7ffd3b6e4194:
            width:                          uint32_t = 978
            height:                         uint32_t = 1022
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 35 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 0x29

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x29
    pMemoryRequirements:            VkMemoryRequirements* = 0x7ffd3b6e4080:
        size:                           VkDeviceSize = 2162696
        alignment:                      VkDeviceSize = 32768
        memoryTypeBits:                 uint32_t = 15

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0x7ffd3b6e4130:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 2162696
        memoryTypeIndex:                uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 0x2a

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    image:                          VkImage = 0x29
    memory:                         VkDeviceMemory = 0x2a
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4008:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e3f58
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e3f58:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x29
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e3f88:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e3ff0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x2b

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e3fa8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e3fa8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4080
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x2b

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e3fa8
        pFences[0]:                     const VkFence = 0x2b
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkImageViewCreateInfo* = 0x7ffd3b6e4080:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 0x29
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D16_UNORM (124)
        components:                     VkComponentMapping = 0x7ffd3b6e40a8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e40b8:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 0x2c

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0x7ffd3b6e4538:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 0x21
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0x564da102c670
            pAttachments[0]:                const VkImageView = 0x28
            pAttachments[1]:                const VkImageView = 0x2c
        width:                          uint32_t = 978
        height:                         uint32_t = 1022
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 0x2d

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd3b6e4360:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x564da0ffee40
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x564da0ffee40:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 2147483647 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL | VK_SHADER_STAGE_RAYGEN_BIT_NV | VK_SHADER_STAGE_ANY_HIT_BIT_NV | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV | VK_SHADER_STAGE_MISS_BIT_NV | VK_SHADER_STAGE_INTERSECTION_BIT_NV | VK_SHADER_STAGE_CALLABLE_BIT_NV | VK_SHADER_STAGE_TASK_BIT_NV | VK_SHADER_STAGE_MESH_BIT_NV)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x2e

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0x7ffd3b6e4380:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 50
        poolSizeCount:                  uint32_t = 1
        pPoolSizes:                     const VkDescriptorPoolSize* = 0x564da10209e0
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0x564da10209e0:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 0x2f

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0x7ffd3b6e43d0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 0x2f
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x564da1021760
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x2e
    pDescriptorSets:                VkDescriptorSet* = 0x564da10209e0
        pDescriptorSets[0]:             VkDescriptorSet = 0x30

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0x564da102b900
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0x564da102b900:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 0x30
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0x564da101fd90
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0x564da101fd90:
                    buffer:                         VkBuffer = 0x19
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 16
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 0x564d9e909b98

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4508:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:                       VkPipeline = 0x1e

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:                         VkPipelineLayout = 0x1d
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 0x7ffd3b6e4430
        pDescriptorSets[0]:             const VkDescriptorSet = 0x30
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = 0x564d9e909b98

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    groupCountX:                    uint32_t = 1
    groupCountY:                    uint32_t = 1
    groupCountZ:                    uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x31

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e43e0
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e43e0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4458
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0x31

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42b0
        pFences[0]:                     const VkFence = 0x31
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyFence(device, fence, pAllocator) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    fence:                          VkFence = 0x31
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0x7ffd3b6e4330:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0x564da1023970
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0x564da1023970:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 2147483647 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL | VK_SHADER_STAGE_RAYGEN_BIT_NV | VK_SHADER_STAGE_ANY_HIT_BIT_NV | VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV | VK_SHADER_STAGE_MISS_BIT_NV | VK_SHADER_STAGE_INTERSECTION_BIT_NV | VK_SHADER_STAGE_CALLABLE_BIT_NV | VK_SHADER_STAGE_TASK_BIT_NV | VK_SHADER_STAGE_MESH_BIT_NV)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 0x32

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0x7ffd3b6e4350:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 50
        poolSizeCount:                  uint32_t = 1
        pPoolSizes:                     const VkDescriptorPoolSize* = 0x564da1023040
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0x564da1023040:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 0x33

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0x7ffd3b6e43a0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 0x33
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 0x564da1023950
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 0x32
    pDescriptorSets:                VkDescriptorSet* = 0x564da1023040
        pDescriptorSets[0]:             VkDescriptorSet = 0x34

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0x564da102b900
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0x564da102b900:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 0x34
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0x564da101f2a0
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0x564da101f2a0:
                    buffer:                         VkBuffer = 0x19
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 16
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 0x564d9e909b98

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4508:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0x7ffd3b6e42b0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 0x21
        framebuffer:                    VkFramebuffer = 0x2d
        renderArea:                     VkRect2D = 0x7ffd3b6e42d0:
            offset:                         VkOffset2D = 0x7ffd3b6e42d0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0x7ffd3b6e42d8:
                width:                          uint32_t = 978
                height:                         uint32_t = 1022
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0x7ffd3b6e4430
            pClearValues[0]:                const VkClearValue = 0x7ffd3b6e4430 (Union):
                color:                          VkClearColorValue = 0x7ffd3b6e4430 (Union):
                    float32:                        float[4] = 0x7ffd3b6e4430
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0x7ffd3b6e4430
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0x7ffd3b6e4430
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0x7ffd3b6e4430:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0x7ffd3b6e4440 (Union):
                color:                          VkClearColorValue = 0x7ffd3b6e4440 (Union):
                    float32:                        float[4] = 0x7ffd3b6e4440
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 1.4013e-45
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0x7ffd3b6e4440
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 1
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0x7ffd3b6e4440
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 1
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0x7ffd3b6e4440:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0x7ffd3b6e4458
        pViewports[0]:                  const VkViewport = 0x7ffd3b6e4458:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 978
            height:                         float = 1022
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0x7ffd3b6e44e8
        pScissors[0]:                   const VkRect2D = 0x7ffd3b6e44e8:
            offset:                         VkOffset2D = 0x7ffd3b6e44e8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0x7ffd3b6e44f0:
                width:                          uint32_t = 978
                height:                         uint32_t = 1022

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 0x24

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 0x23
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 0x7ffd3b6e43e0
        pDescriptorSets[0]:             const VkDescriptorSet = 0x34
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = 0x564d9e909b98

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0x7ffd3b6e43e0
        pBuffers[0]:                    const VkBuffer = 0x17
    pOffsets:                       const VkDeviceSize* = 0x564d9e909ae0
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    buffer:                         VkBuffer = 0x15
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    indexCount:                     uint32_t = 3
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x35

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e43e0
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e43e0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e4458
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0x35

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42b0
        pFences[0]:                     const VkFence = 0x35
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyFence(device, fence, pAllocator) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    fence:                          VkFence = 0x35
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    swapchain:                      VkSwapchainKHR = 0xa
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 0x7
    fence:                          VkFence = 0
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4338:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42c8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42c8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = UNKNOWN (1000001002)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0xb
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e42f8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x36

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e42d8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e42d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e43a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x36

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42d8
        pFences[0]:                     const VkFence = 0x36
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4338:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42c8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42c8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x25
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e42f8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x37

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e42d8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e42d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e43a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x37

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42d8
        pFences[0]:                     const VkFence = 0x37
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4338:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcImage:                       VkImage = 0x25
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 0xb
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageCopy* = 0x7ffd3b6e42c0
        pRegions[0]:                    const VkImageCopy = 0x7ffd3b6e42c0:
            srcSubresource:                 VkImageSubresourceLayers = 0x7ffd3b6e42c0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffset:                      VkOffset3D = 0x7ffd3b6e42d0:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            dstSubresource:                 VkImageSubresourceLayers = 0x7ffd3b6e42dc:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffset:                      VkOffset3D = 0x7ffd3b6e42ec:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            extent:                         VkExtent3D = 0x7ffd3b6e42f8:
                width:                          uint32_t = 978
                height:                         uint32_t = 1022
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x38

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e42d8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e42d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909c80
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e43a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x38

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42d8
        pFences[0]:                     const VkFence = 0x38
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4338:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42c0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42c0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0x25
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e42f0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x39

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e42d8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e42d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e43a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x39

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42d8
        pFences[0]:                     const VkFence = 0x39
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    flags:                          VkCommandBufferResetFlags = 1 (VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0x7ffd3b6e4338:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 0x564d9e90ab30
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0x564d9e90ab30
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0x7ffd3b6e42c8
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0x7ffd3b6e42c8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 0
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = UNKNOWN (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 0xb
            subresourceRange:               VkImageSubresourceRange = 0x7ffd3b6e42f8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0x564da1011ab0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    pCreateInfo:                    const VkFenceCreateInfo* = 0x7ffd3b6e4320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 0x3a

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0x7ffd3b6e42d8
        pSubmits[0]:                    const VkSubmitInfo = 0x7ffd3b6e42d8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0x564d9e909b98
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0x564d9e909b98
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0x7ffd3b6e43a0
                pCommandBuffers[0]:             const VkCommandBuffer = 0x564da1011ab0
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = 0x564d9e909b98
    fence:                          VkFence = 0x3a

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0x564da0e8fa40
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 0x7ffd3b6e42d8
        pFences[0]:                     const VkFence = 0x3a
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0x564da0dcb050
    pPresentInfo:                   const VkPresentInfoKHR* = 0x7ffd3b6e44b8:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0x564da0fffb10
            pWaitSemaphores[0]:             const VkSemaphore = 0x7
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0x564da101c900
            pSwapchains[0]:                 const VkSwapchainKHR = 0xa
        pImageIndices:                  const uint32_t* = 0x7ffd3b6e449c
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 1:
vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:
    device:                         VkDevice = 0x564da0e8fa40
    swapchain:                      VkSwapchainKHR = 0xa
    pAllocator:                     const VkAllocationCallbacks* = NULL

